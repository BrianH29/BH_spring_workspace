/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.57
 * Generated at: 2020-10-27 04:45:23 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class main_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar", Long.valueOf(1603690406103L));
    _jspx_dependants.put("jar:file:/C:/BH_spring_workspace/springProject/src/main/webapp/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar!/META-INF/c.tld", Long.valueOf(1425946270000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<!-- \r\n");
      out.write("\t\t회원서비스 - 로그인(R), 로그아웃, 회원가입(C), 정보변경(U), 회원탈퇴(U), [아이디 중복체크(R)]\r\n");
      out.write("\t\t게시판서비스 - 게시파리스트(R), 페이징처리, 게시판작성하기(C), 첨부파일업로드, 게시판상세(U), \r\n");
      out.write("\t\t\t\t\t게시판수정(U), 게시판 삭제(U),[댓글리스트(R),댓글작성(C)]\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t1.jstl 라이브러리 (4개) 직접 lib 폴더만들어서 추가해야만 함\r\n");
      out.write("\t\t2. views 폴더안에 필요한 폴더들(common, member, board)\r\n");
      out.write("\t\t3. 웹문서에서 필요로하는 외부문서들을 관리하는 폴더인 webapp/resources 폴더안에\r\n");
      out.write("\t\t   필요한 폴더들(css,js,images, uploadFiles)\r\n");
      out.write("\t\t4. 패키지 만들기, 클래스 만들기\r\n");
      out.write("\t\t5. resources 폴더안에 mybatis와 관련된 mapper, config.xml 문서들 만들기\r\n");
      out.write("\t\t\t>> dtd : xml 문서의 구조 및 해당 문서에서 사용할 수 있는 적합한 요소와 속성들을 정의 \r\n");
      out.write("\t\t\t\t\t 이 문서가 유효한지 유효성 검사도 됨 \r\n");
      out.write("\t\t\t>> dtd 설정해두기 : \r\n");
      out.write("\t\t\t[window - preferences - xml - xml catalog - add]\r\n");
      out.write("\t\t\t-Config \r\n");
      out.write("\t\t\t Location : http://mybatis.org/dtd/mybatis-3-config.dtd\r\n");
      out.write("\t\t\t key      : -//mybatis.org//DTD Config 3.0//EN\r\n");
      out.write("\t\t\t \r\n");
      out.write("\t\t\t -Mapper\r\n");
      out.write("\t\t\t Location : http://mybatis.org/dtd/mybatis-3-mapper.dtd\r\n");
      out.write("\t\t\t key      : -//mybatis.org//DTD Mapper 3.0//EN\r\n");
      out.write("\t\t6. \r\n");
      out.write("\t -->\r\n");
      out.write("\t \r\n");
      out.write("\t ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "common/menubar.jsp", out, false);
      out.write("\r\n");
      out.write("\t <div style=\"height:400px\"></div>\r\n");
      out.write("\t ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "common/footer.jsp", out, false);
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
